// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JoinStoriesSDK
import Alamofire
import AlamofireImage
import Foundation
import QuartzCore
import SafariServices
import SnapKit
import Swift
import SwiftyJSON
import UIKit
import WebKit
import _Concurrency
public protocol NetworkSpec {
  var baseUrl: Swift.String { get }
  func httpGet(route: Swift.String, parameters: [Swift.String : Any]?, completionHandler: @escaping (Alamofire.AFDataResponse<Any>) -> Swift.Void)
}
public class Network : JoinStoriesSDK.NetworkSpec {
  final public let baseUrl: Swift.String
  public init(baseUrl: Swift.String, timeoutInterval: Foundation.TimeInterval)
  public func httpGet(route: Swift.String, parameters: [Swift.String : Any]?, completionHandler: @escaping (Alamofire.AFDataResponse<Any>) -> Swift.Void)
  @objc deinit
}
public enum NetworkError : Swift.Error {
  case notFound
  case badRequest
  case unauthorized
  case forbidden
  public static func == (a: JoinStoriesSDK.NetworkError, b: JoinStoriesSDK.NetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StoriesAPIError : Swift.Error {
  case badConfiguration(JoinStoriesSDK.JoinConfigurationError)
  case fetchingStoriesTimedOut
  case fetchingStoriesFailed
}
public typealias StoriesCallback = (Swift.Result<[JoinStoriesSDK.StoryValue], JoinStoriesSDK.StoriesAPIError>) -> Swift.Void
public protocol StoriesApiSpec {
  func fetchStories(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
}
public class StoriesApi : JoinStoriesSDK.StoriesApiSpec {
  public init(baseUrl: Swift.String, timeoutInterval: Foundation.TimeInterval)
  public func fetchStories(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
  @objc deinit
}
final public class JoinConfiguration {
  public init(team: Swift.String)
  @objc deinit
}
public enum JoinConfigurationError : Swift.Error {
  case noConfigurationFound
  case noTeamFound
  public static func == (a: JoinStoriesSDK.JoinConfigurationError, b: JoinStoriesSDK.JoinConfigurationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias StoriesCompletionHandler = (Swift.Result<Swift.Void, JoinStoriesSDK.StoriesAPIError>) -> Swift.Void
@_hasMissingDesignatedInitializers final public class JoinStories {
  public static let shared: JoinStoriesSDK.JoinStories
  public static func setConfiguration(_ configuration: JoinStoriesSDK.JoinConfiguration, viewConfig: JoinStoriesSDK.StoryViewConfig? = nil)
  public static func startThumbView(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
  public static func startPlayer(alias: Swift.String, fromController controller: UIKit.UIViewController, completion: @escaping JoinStoriesSDK.StoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  final public func fetchStories(alias: Swift.String, completion: @escaping JoinStoriesSDK.StoriesCallback)
  final public func startPlayer(alias: Swift.String, fromController controller: UIKit.UIViewController, completion: @escaping JoinStoriesSDK.StoriesCompletionHandler, onDismiss: (() -> Swift.Void)? = nil)
  final public func getViewConfig() -> JoinStoriesSDK.StoryViewConfig?
  final public func thumbAndLabelDimensions(ratio: Swift.Double = 0.7) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
  final public func containerDimension() -> Swift.Int
  final public func thumbViewSpacing() -> Swift.Int
  @objc deinit
}
extension CoreGraphics.CGRect {
  public var x: CoreGraphics.CGFloat {
    get
    set
  }
  public var y: CoreGraphics.CGFloat {
    get
    set
  }
  public var width: CoreGraphics.CGFloat {
    get
    set
  }
  public var height: CoreGraphics.CGFloat {
    get
    set
  }
  public var top: CoreGraphics.CGFloat {
    get
    set
  }
  public var bottom: CoreGraphics.CGFloat {
    get
    set
  }
  public var left: CoreGraphics.CGFloat {
    get
    set
  }
  public var right: CoreGraphics.CGFloat {
    get
    set
  }
  public var center: CoreGraphics.CGPoint {
    get
    set
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func applySimpleStyle()
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func scrollToNextItem()
  @_Concurrency.MainActor(unsafe) public func scrollToPreviousItem()
}
extension UIKit.UIColor {
  convenience public init(hex6: Swift.UInt32, alpha: CoreGraphics.CGFloat = 1)
  convenience public init(hex8: Swift.UInt32)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func circleGradientBorder(withLineWidth width: CoreGraphics.CGFloat, andColors colors: [CoreGraphics.CGColor]) -> QuartzCore.CAGradientLayer
  @_Concurrency.MainActor(unsafe) public func circleBorder(withLineWidth width: CoreGraphics.CGFloat, strokeColor: CoreGraphics.CGColor, opacity: Swift.Float = 1.0) -> QuartzCore.CAShapeLayer
}
public typealias SimpleClosure = (() -> ())
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addTapGestureRecognizer(action: (() -> Swift.Void)?)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentAlert(title: Swift.String, message: Swift.String)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showError(_ error: JoinStoriesSDK.StoriesAPIError)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func presentStorySheet(story: JoinStoriesSDK.StoryValue, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func presentStoryPlayer(stories: [JoinStoriesSDK.StoryValue], beginningAt indexPath: Foundation.IndexPath? = nil, animated: Swift.Bool, onDismiss: (() -> Swift.Void)? = nil)
}
extension UIKit.UIViewController : UIKit.UIViewControllerTransitioningDelegate {
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public func topAreaInset() -> CoreGraphics.CGFloat
}
public enum StoryPresentationMode {
  case Sheet
  case ViewController
  public static func == (a: JoinStoriesSDK.StoryPresentationMode, b: JoinStoriesSDK.StoryPresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JoinStoriesSDK.StoryValue {
  public init(fromJson json: SwiftyJSON.JSON)
}
public struct StoryValue : Swift.Equatable {
  public var id: Swift.String
  public static func == (a: JoinStoriesSDK.StoryValue, b: JoinStoriesSDK.StoryValue) -> Swift.Bool
}
public enum CircularInteractiveTransitionSwipeDirection : CoreGraphics.CGFloat {
  case up
  case down
  public init?(rawValue: CoreGraphics.CGFloat)
  public typealias RawValue = CoreGraphics.CGFloat
  public var rawValue: CoreGraphics.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class StoryCircularInteractiveTransition : UIKit.UIPercentDrivenInteractiveTransition {
  @_Concurrency.MainActor(unsafe) open var interactionThreshold: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open var swipeDirection: JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection
  @_Concurrency.MainActor(unsafe) open func attach(to: UIKit.UIViewController)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StoryCircularTransition : ObjectiveC.NSObject {
  public var startingPoint: CoreGraphics.CGPoint {
    get
    set
  }
  public var circleColor: UIKit.UIColor
  public enum CircularTransitionMode : Swift.Int {
    case present
    case dismiss
    case pop
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var transitionMode: JoinStoriesSDK.StoryCircularTransition.CircularTransitionMode
  @objc override dynamic public init()
  @objc deinit
}
extension JoinStoriesSDK.StoryCircularTransition : UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class StoryCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public static let reuseIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public var config: JoinStoriesSDK.StoryViewConfig
  @_Concurrency.MainActor(unsafe) public var storyPersistence: JoinStoriesSDK.StoryPersistable
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setupCell(storyValue: JoinStoriesSDK.StoryValue, with storyConfig: JoinStoriesSDK.StoryViewConfig, ratio: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForReuse()
  @objc deinit
}
public protocol StoryComponentsConfigurable {
  func getThumbAndLabelDimensions(ratio: Swift.Double) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
}
public enum DisplayType {
  case seen
  case unseen
  public static func == (a: JoinStoriesSDK.DisplayType, b: JoinStoriesSDK.DisplayType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StoryPersistable : AnyObject {
  func markAsSeen(id: Swift.String)
  func storyIsSeen(id: Swift.String) -> Swift.Bool
}
public protocol StoryWebViewDelegate : WebKit.WKNavigationDelegate {
  func onPlayerDismiss()
  func didReceiveNoPreviousPageListener(on story: JoinStoriesSDK.StoryValue)
  func didReceiveNoNextPageListener(on story: JoinStoriesSDK.StoryValue)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StoryPlayer : WebKit.WKWebView, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func addDelegate(_ delegate: JoinStoriesSDK.StoryWebViewDelegate?)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
public protocol StoryNavigationDelegate {
  func storyItemShown(at indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StoryPlayerViewController : UIKit.UIViewController, JoinStoriesSDK.StoryWebViewDelegate, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public var transition: JoinStoriesSDK.StoryCircularTransition
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) public func onPlayerDismiss()
  @_Concurrency.MainActor(unsafe) public func didReceiveNoPreviousPageListener(on story: JoinStoriesSDK.StoryValue)
  @_Concurrency.MainActor(unsafe) public func didReceiveNoNextPageListener(on story: JoinStoriesSDK.StoryValue)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension JoinStoriesSDK.StoryPlayerViewController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension JoinStoriesSDK.StoryPlayerViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StoryThumbView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(thumbDimension: Swift.Int, labelDimension: Swift.Int, loaderInnerViewColor: [UIKit.UIColor]?, loaderColors: [UIKit.UIColor]?, loaderInnerViewWidth: Swift.Int?, loaderWidth: Swift.Int?, fontName: Swift.String?, labelColor: UIKit.UIColor?, withLabel: Swift.Bool?, storyViewedIndicatorColor: UIKit.UIColor?, storyViewedIndicatorAlpha: Swift.Float?, thumbViewOverlayColor: UIKit.UIColor?, displayType: JoinStoriesSDK.DisplayType)
  @_Concurrency.MainActor(unsafe) public func reset()
  @_Concurrency.MainActor(unsafe) public func addOverlay(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func showOverlayView()
  @_Concurrency.MainActor(unsafe) public func hideOverlayView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func loadStory(story: JoinStoriesSDK.StoryValue)
  @objc deinit
}
extension JoinStoriesSDK.StoryThumbView {
  @_Concurrency.MainActor(unsafe) public func startLayerAnimations(speed: Swift.Float = 0.2, alpha: CoreGraphics.CGFloat = 0.7)
  @_Concurrency.MainActor(unsafe) public func stopLayerAnimations()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class StoryTransitionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var stories: [JoinStoriesSDK.StoryValue]
  @_Concurrency.MainActor(unsafe) open var transition: JoinStoriesSDK.StoryCircularTransition
  @_Concurrency.MainActor(unsafe) open var interactiveTransition: JoinStoriesSDK.StoryCircularInteractiveTransition
  @_Concurrency.MainActor(unsafe) open var startingPoint: CoreGraphics.CGPoint
  @_Concurrency.MainActor(unsafe) open var collectionView: UIKit.UICollectionView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension JoinStoriesSDK.StoryTransitionViewController : JoinStoriesSDK.StoryNavigationDelegate {
  @_Concurrency.MainActor(unsafe) public func storyItemShown(at indexPath: Foundation.IndexPath)
}
extension JoinStoriesSDK.StoryTransitionViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers public class StoryViewConfigDefault {
  public static let shared: JoinStoriesSDK.StoryViewConfigDefault
  final public let requestTimeoutInterval: Swift.Double
  final public let containerDimension: Swift.Int
  final public let fontName: Swift.String
  final public let labelColor: UIKit.UIColor
  final public let thumbViewSpacing: Swift.Int
  final public let withLabel: Swift.Bool
  final public let loaderInnerViewColor: [UIKit.UIColor]
  final public let loaderColors: [UIKit.UIColor]
  final public let loaderInnerViewWidth: Swift.Int
  final public let loaderWidth: Swift.Int
  final public let storyViewedIndicatorColor: UIKit.UIColor
  final public let storyViewedIndicatorAlpha: Swift.Float
  final public let thumbViewOverlayColor: UIKit.UIColor
  @objc deinit
}
public struct StoryViewConfig {
  public var containerDimension: Swift.Int
  public init(requestTimeoutInterval: Foundation.TimeInterval = StoryViewConfigDefault.shared.requestTimeoutInterval, containerDimension: Swift.Int = StoryViewConfigDefault.shared.containerDimension, fontName: Swift.String = StoryViewConfigDefault.shared.fontName, labelColor: UIKit.UIColor = StoryViewConfigDefault.shared.labelColor, thumbViewSpacing: Swift.Int = StoryViewConfigDefault.shared.thumbViewSpacing, withLabel: Swift.Bool = StoryViewConfigDefault.shared.withLabel, loaderInnerViewColor: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderInnerViewColor, loaderColors: [UIKit.UIColor] = StoryViewConfigDefault.shared.loaderColors, loaderInnerViewWidth: Swift.Int = StoryViewConfigDefault.shared.loaderInnerViewWidth, loaderWidth: Swift.Int = StoryViewConfigDefault.shared.loaderWidth, storyViewedIndicatorColor: UIKit.UIColor = StoryViewConfigDefault.shared.storyViewedIndicatorColor, storyViewedIndicatorAlpha: Swift.Float = StoryViewConfigDefault.shared.storyViewedIndicatorAlpha, thumbViewOverlayColor: UIKit.UIColor = StoryViewConfigDefault.shared.thumbViewOverlayColor)
  public func getThumbViewSpacing() -> Swift.Int
}
extension JoinStoriesSDK.StoryViewConfig : JoinStoriesSDK.StoryComponentsConfigurable {
  public func getThumbAndLabelDimensions(ratio: Swift.Double = 0.7) -> (thumbWidth: Swift.Int, labelWidth: Swift.Int)
}
extension JoinStoriesSDK.NetworkError : Swift.Equatable {}
extension JoinStoriesSDK.NetworkError : Swift.Hashable {}
extension JoinStoriesSDK.JoinConfigurationError : Swift.Equatable {}
extension JoinStoriesSDK.JoinConfigurationError : Swift.Hashable {}
extension JoinStoriesSDK.StoryPresentationMode : Swift.Equatable {}
extension JoinStoriesSDK.StoryPresentationMode : Swift.Hashable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.Equatable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.Hashable {}
extension JoinStoriesSDK.CircularInteractiveTransitionSwipeDirection : Swift.RawRepresentable {}
extension JoinStoriesSDK.StoryCircularTransition.CircularTransitionMode : Swift.Equatable {}
extension JoinStoriesSDK.StoryCircularTransition.CircularTransitionMode : Swift.Hashable {}
extension JoinStoriesSDK.StoryCircularTransition.CircularTransitionMode : Swift.RawRepresentable {}
extension JoinStoriesSDK.DisplayType : Swift.Equatable {}
extension JoinStoriesSDK.DisplayType : Swift.Hashable {}
